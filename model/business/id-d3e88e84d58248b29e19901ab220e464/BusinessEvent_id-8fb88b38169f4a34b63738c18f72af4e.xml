<archimate:BusinessEvent
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="CAPEC-123: Buffer Manipulation"
    id="id-8fb88b38169f4a34b63738c18f72af4e"
    documentation="An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.">
  <properties
      key="ID"
      value="CAPEC-123"/>
  <properties
      key="Latest Sync Date"
      value="11/05/25 15:15:38"/>
  <properties
      key="Original ID"
      value="123"/>
  <properties
      key="Abstraction"
      value="Meta"/>
  <properties
      key="Status"
      value="Draft"/>
  <properties
      key="Alternate Terms"/>
  <properties
      key="Likelihood Of Attack"
      value="High"/>
  <properties
      key="Typical Severity"
      value="Very High"/>
  <properties
      key="Related Attack Patterns"/>
  <properties
      key="Execution Flow"/>
  <properties
      key="Prerequisites"
      value="::The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.::"/>
  <properties
      key="Skills Required"/>
  <properties
      key="Resources Required"/>
  <properties
      key="Indicators"/>
  <properties
      key="Consequences"
      value="::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:A buffer manipulation attack often results in a crash of the application due to the corruption of memory.::SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data:NOTE:If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.::"/>
  <properties
      key="Mitigations"
      value="::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::"/>
  <properties
      key="Example Instances"/>
  <properties
      key="Related Weaknesses"
      value="::119::"/>
  <properties
      key="Taxonomy Mappings"/>
  <properties
      key="Notes"/>
</archimate:BusinessEvent>
